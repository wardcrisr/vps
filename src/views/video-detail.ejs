<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="referrer" content="origin-when-cross-origin">
    <title><%= video.title %> - <%= title %></title>
    <!-- Umami Analytics -->
    <script defer src="https://cloud.umami.is/script.js" data-website-id="0447789b-3880-4f93-bcc4-e0c5db71972d"></script>
    <!-- SEO Meta -->
    <meta name="description" content="<%= (video.description || video.title).replace(/"/g,'&quot;') %>">
    <% if (typeof canonicalUrl !== 'undefined') { %>
    <link rel="canonical" href="<%= canonicalUrl %>">
    <% } %>

    <!-- Open Graph -->
    <meta property="og:type" content="video.other">
    <meta property="og:title" content="<%= video.title.replace(/"/g,'&quot;') %>">
    <meta property="og:description" content="<%= (video.description || video.title).replace(/"/g,'&quot;') %>">
    <meta property="og:image" content="<%= video.coverUrl || video.thumbnail %>">
    <!-- 恢复社交卡片可用性（不放签名直链，保持兼容） -->
    <meta property="og:video" content="<%= canonicalUrl %>">

    <!-- Twitter Card -->
    <meta name="twitter:card" content="player">
    <meta name="twitter:title" content="<%= video.title.replace(/"/g,'&quot;') %>">
    <meta name="twitter:description" content="<%= (video.description || video.title).replace(/"/g,'&quot;') %>">
    <meta name="twitter:image" content="<%= video.coverUrl || video.thumbnail %>">
    <meta name="twitter:player" content="<%= canonicalUrl %>">
    <meta name="twitter:player:width" content="1280">
    <meta name="twitter:player:height" content="720">

    <!-- VideoObject JSON-LD -->
    <script type="application/ld+json"><%- JSON.stringify({
      "@context":"https://schema.org",
      "@type":"VideoObject",
      name: video.title,
      description: video.description || video.title,
      thumbnailUrl: video.coverUrl || video.thumbnail,
      uploadDate: new Date(video.createdAt).toISOString(),
      duration: `PT${video.duration}S`,
      // 避免在结构化数据中暴露直链
      embedUrl: canonicalUrl,
      contentUrl: canonicalUrl,
      author:{"@type":"Person",name:video.up.name,identifier:video.up.uid},
      genre: video.category,
      interactionStatistic:[{"@type":"InteractionCounter","interactionType":{"@type":"WatchAction"},"userInteractionCount":video.views||0},{"@type":"InteractionCounter","interactionType":{"@type":"LikeAction"},"userInteractionCount":video.likes||0}],
      isAccessibleForFree: !video.isPremiumOnly
    }) %></script>
    <link rel="stylesheet" href="https://unpkg.com/video.js/dist/video-js.css">
    <link rel="stylesheet" href="https://unpkg.com/@videojs/themes@1/dist/city/index.css">
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; }
        .video-player { background: #000; margin-bottom: 20px; }
        .video-info { background: white; padding: 20px; border-radius: 8px; }
        .video-title { font-size: 24px; font-weight: bold; margin-bottom: 10px; }
        .video-stats { color: #666; margin-bottom: 15px; }
        .video-description { line-height: 1.6; }
        .uploader-info { display: flex; align-items: center; margin: 15px 0; }
        .uploader-avatar { width: 40px; height: 40px; border-radius: 50%; background: #ddd; margin-right: 10px; }
        .related-videos { margin-top: 20px; }
        .related-title { font-size: 18px; font-weight: bold; margin-bottom: 15px; }
        .video-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 15px; }
        .video-card { background: white; border-radius: 8px; overflow: hidden; cursor: pointer; }
        .video-card:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
        .video-thumbnail { width: 100%; height: 120px; background: #ddd; display: flex; align-items: center; justify-content: center; }
        .video-card-info { padding: 10px; }
        .video-card-title { font-size: 14px; font-weight: bold; margin-bottom: 5px; }
        .video-card-stats { font-size: 12px; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <!-- ★ Video.js 播放器 ★ -->
        <div style="position: relative; padding-top: 56.25%;" id="playerContainer">
          <video id="videoPlayer" class="video-js vjs-theme-city" playsinline preload="auto" controls controlsList="nodownload" style="position:absolute;top:0;left:0;width:100%;height:100%;background:#000;" oncontextmenu="return false"></video>
         <!-- 遮罩层 -->
         <div id="payOverlay" style="display:none;position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.6);color:#fff;align-items:center;justify-content:center;flex-direction:column;">
            <p style="font-size:20px;margin-bottom:20px;">试看已结束，支付后继续观看</p>
            <button id="buyBtn" style="padding:10px 20px;font-size:16px;cursor:pointer;background:#ff5722;border:none;color:#fff;border-radius:4px;">立即购买</button>
          </div>
        </div>
        <!-- ★ 播放器结束 ★ -->
        
        <div class="video-info">
            <h1 class="video-title"><%= video.title %></h1>
            <div class="video-stats">
                <span><%= video.views || 0 %> 次播放</span> •
                <span><%= video.likes || 0 %> 点赞</span> •
                <span><%= video.danmakuCount || 0 %> 弹幕</span>
            </div>
            
            <div class="uploader-info">
                <% if (video.up && video.up.avatarUrl) { %>
                <img src="<%= video.up.avatarUrl %>" alt="<%= (video.up.name || video.up.displayName || video.up.username || '未知用户') %> 的头像" style="width:40px;height:40px;border-radius:50%;object-fit:cover;margin-right:10px;">
                <% } else { %>
                <div class="uploader-avatar"></div>
                <% } %>
                <div>
                    <div><strong><%= video.up ? (video.up.name || video.up.displayName || video.up.username || '未知用户') : '未知用户' %></strong></div>
                    <div style="font-size: 12px; color: #666;">UP主</div>
                </div>
            </div>
            
            <div class="video-description">
                <%= video.description || '暂无描述' %>
            </div>
        </div>
        
        <% if (relatedVideos && relatedVideos.length > 0) { %>
        <div class="related-videos">
            <h3 class="related-title">相关推荐</h3>
            <div class="video-grid">
                <% relatedVideos.forEach(function(relatedVideo) { %>
                <% const previewAttr = relatedVideo.previewUrl ? `data-preview="${relatedVideo.previewUrl}"` : '' %>
                <% const imgAttr = relatedVideo.previewImage ? `data-image="${relatedVideo.previewImage}"` : '' %>
                <div 
                  class="video-card" 
                  onclick="location.href='/video/<%= relatedVideo._id %>'" 
                >
                    <div class="video-thumbnail" style="position:relative;height:120px;overflow:hidden;" <%- previewAttr %> <%- imgAttr %>>
                        <% const thumb = relatedVideo.previewImage || relatedVideo.coverUrl || relatedVideo.thumbnail || '/api/placeholder/video-thumbnail'; %>
                        <img src="<%= thumb %>" alt="<%= relatedVideo.title %>" style="width:100%;height:100%;object-fit:cover;">
                    </div>
                    <div class="video-card-info">
                        <div class="video-card-title"><%= relatedVideo.title %></div>
                        <div class="video-card-stats">
                            <% if (relatedVideo.up && (relatedVideo.up.name || relatedVideo.up.displayName || relatedVideo.up.username)) { %>
                            <span>👤 <%= relatedVideo.up.name || relatedVideo.up.displayName || relatedVideo.up.username %></span> · 
                            <% } %>
                            <%= relatedVideo.views || 0 %> 播放
                        </div>
                        <% if (relatedVideo.description) { %>
                        <div class="video-card-desc text-muted" style="font-size:12px;line-height:1.4;max-height:3.6em;overflow:hidden;display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;"><%= relatedVideo.description %></div>
                        <% } %>
                    </div>
                </div>
                <% }); %>
            </div>
        </div>
        <% } %>
        
        <div style="margin-top: 30px; text-align: center;">
            <a href="/" style="color: #1890ff; text-decoration: none;">← 返回首页</a>
        </div>
    </div>
    <!-- Video.js & 插件 -->
    <script src="https://unpkg.com/video.js/dist/video.js"></script>
    <!-- 使用 jsDelivr CDN，避免 unpkg 被阻断 -->
    <script src="https://cdn.jsdelivr.net/npm/videojs-contrib-dash@1/dist/videojs-dash.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/videojs-sprite-thumbnails@latest/dist/videojs-sprite-thumbnails.min.js"></script>

    <!-- 相关视频数据 -->
    <script id="related-videos-data" type="application/json">
      <%- JSON.stringify(relatedVideos || []) %>
    </script>

    <!-- 页面配置数据，避免在JS中直接写EJS，减少语法冲突 -->
    <script id="page-config" type="application/json">
      <%- JSON.stringify({
        VIDEO_ID: video.id,
        PRICE: Number.isFinite(video.priceCoins) ? video.priceCoins : 0,
        CATEGORY: video.category,
        DEFAULT_PLAY_URL: video.playUrl ? video.playUrl : '',
        IS_LOGIN: !!user,
        IS_PREMIUM_USER: (typeof user !== 'undefined' && user && user.isPremium === true) ? true : false,
        VIDEO_IS_PREMIUM_ONLY: !!video.isPremiumOnly
      }) %>
    </script>

    <script>
      const PAGE_CONF = JSON.parse(document.getElementById('page-config').textContent || '{}');

      // 前端 UA 白名单：PC Chrome、Android Chrome、iOS Safari、iOS Chrome（CriOS）
      (function enforceUA(){
        try{
          const ua = (navigator.userAgent||'').toLowerCase();
          const isIOS = /iphone|ipad|ipod/.test(ua);
          const isAndroid = /android/.test(ua);
          const isDesktop = !isIOS && !isAndroid;
          const blocked = /edg|edgios|edga|opr|opios|firefox|fxios|ucbrowser|samsungbrowser|huawei|harmony|miuibrowser|baidubrowser|bidubrowser|qqbrowser|dingtalk|micromessenger/.test(ua);
          let allowed = false;
          if(!blocked){
            if(isIOS){
              const isCriOS = /crios/.test(ua);
              const isSafari = /safari/.test(ua) && /version\//.test(ua) && !isCriOS;
              allowed = isSafari || isCriOS;
            } else if(isAndroid){
              allowed = /chrome\//.test(ua);
            } else if(isDesktop){
              allowed = /chrome\//.test(ua);
            }
          }
          if(!allowed){
            // 拒绝初始化 Video.js
            const container = document.getElementById('playerContainer');
            if(container){
              container.innerHTML = '<div style="display:flex;align-items:center;justify-content:center;height:220px;background:#111;color:#fff;border-radius:8px;">当前浏览器不被支持，请使用 PC Chrome、Android Chrome 或 iOS Safari/Chrome</div>';
            }
            throw new Error('Blocked UA');
          }
        }catch(e){ console.warn('UA blocked or check failed:', e && e.message); }
      })();
      
      const VIDEO_ID = PAGE_CONF.VIDEO_ID;
      const PRICE    = PAGE_CONF.PRICE;
      let hasPurchase = false; // 后端可渲染已购状态
      const IS_PAID_VIDEO = (PRICE > 0) || (PAGE_CONF.CATEGORY && PAGE_CONF.CATEGORY.trim() === 'paid');
      const IS_VIP_VIDEO = PAGE_CONF.VIDEO_IS_PREMIUM_ONLY;
      const IS_PREMIUM_USER = PAGE_CONF.IS_PREMIUM_USER;

      // 正常模式：根据数据库中的isPremiumOnly字段判断是否为会员视频
      const FORCE_VIP_TEST = false; // 生产环境设为false
      console.log('=== 会员视频测试模式 ===');
      console.log('原始 IS_VIP_VIDEO:', IS_VIP_VIDEO);
      console.log('IS_PREMIUM_USER:', IS_PREMIUM_USER);
      console.log('强制测试模式:', FORCE_VIP_TEST);

      // 计算是否需要试看限制（实时计算，购买/开通会员后可动态变化）
      const needRestrict = () => {
        const result = (IS_PAID_VIDEO && !hasPurchase) || ((IS_VIP_VIDEO || FORCE_VIP_TEST) && !IS_PREMIUM_USER);
        console.log('needRestrict() 计算结果:', result, {
          IS_PAID_VIDEO,
          hasPurchase,
          IS_VIP_VIDEO: IS_VIP_VIDEO || FORCE_VIP_TEST,
          IS_PREMIUM_USER
        });
        return result;
      };

      const DEFAULT_PLAY_URL = PAGE_CONF.DEFAULT_PLAY_URL;
      const IS_LOGIN = PAGE_CONF.IS_LOGIN;

      const playerEl   = document.getElementById('videoPlayer');
      const vjsPlayer  = videojs(playerEl, {
        fluid: true,
        html5:{ vhs:{ overrideNative:true }},
        controlBar:{ pictureInPictureToggle:false, downloadMenuButton:false }
      });

      // 缩略图示例（插件存在时才调用）
      if (typeof vjsPlayer.spriteThumbnails === 'function') {
        try {
      vjsPlayer.spriteThumbnails({ url:'/thumbs/sprite.jpg', width:160, height:90, interval:1 });
        } catch(e) { console.warn('spriteThumbnails 初始化失败', e); }
      }

      const overlay  = document.getElementById('payOverlay');
      const buyBtn   = document.getElementById('buyBtn');

      console.log('初始化元素检查:');
      console.log('overlay:', overlay);
      console.log('buyBtn:', buyBtn);

      // 根据视频类型动态修改提示文案
      if((IS_VIP_VIDEO || FORCE_VIP_TEST) && !IS_PREMIUM_USER){
        if(overlay && overlay.querySelector('p')) {
          overlay.querySelector('p').textContent = '试看已结束，请开通会员继续观看';
          console.log('✅ 已设置会员提示文案');
        }
        if(buyBtn) {
          buyBtn.textContent = '立即开通会员';
          console.log('✅ 已设置会员按钮文案');
        }
      }

      const PREVIEW_SECONDS = 150;

      // 追踪预览媒介（video 或 iframe）
      let previewIsIframe = false;
      let previewIframe   = null;

      let overlayShown = false; // 防止重复显示遮罩
      
      function showPayOverlay(){
        if(overlayShown) {
          console.log('⚠️ 遮罩已经显示过了，跳过重复调用');
          return;
        }
        
        console.log('🚀 执行showPayOverlay，显示遮罩层');
        overlayShown = true;
        
        // 清理所有计时器
        if(previewTimer) {
          clearTimeout(previewTimer);
          previewTimer = null;
          console.log('🧹 清理previewTimer');
        }
        if(forceCheckTimer) {
          clearInterval(forceCheckTimer);
          forceCheckTimer = null;
          console.log('🧹 清理forceCheckTimer');
        }
        
        // 直接通过ID获取元素，确保获取到最新的DOM
        const overlayElement = document.getElementById('payOverlay');
        console.log('🔍 overlay元素:', overlayElement);
        
        if (!overlayElement) {
          console.error('❌ overlay元素未找到！');
          return;
        }
        
        overlayElement.style.display = 'flex';
        overlayElement.style.zIndex = '9999';
        overlayElement.style.position = 'absolute';
        console.log('✅ 遮罩层样式已设置');
        console.log('📊 当前overlay样式:', {
          display: overlayElement.style.display,
          zIndex: overlayElement.style.zIndex,
          position: overlayElement.style.position
        });
        
        if(previewIsIframe && previewIframe){
          // 停止 iframe 播放
          console.log('🛑 移除iframe播放器');
          previewIframe.remove();
          previewIframe = null;
        }else{
          console.log('⏸️ 暂停Video.js播放器');
          try {
            vjsPlayer.pause();
          } catch(e) {
            console.error('❌ 暂停播放器失败:', e);
          }
        }
      }

      // 监听试看限制（Video.js）- 防止用户跳跃播放绕过限制
      let totalWatchedTime = 0;
      let lastCheckTime = 0;
      
      vjsPlayer.on('timeupdate', ()=>{
        const currentTime = vjsPlayer.currentTime();
        
        // 计算实际观看时间，防止用户跳跃播放
        if(needRestrict()) {
          const timeDiff = currentTime - lastCheckTime;
          // 只有连续播放时才累计观看时间（时间差小于2秒且为正数）
          if(timeDiff > 0 && timeDiff <= 2) {
            totalWatchedTime += timeDiff;
          }
          lastCheckTime = currentTime;
          
          // 调试信息
          if(currentTime > 120 && Math.floor(currentTime) % 5 === 0) {
            console.log(`播放时间: ${currentTime.toFixed(1)}s, 实际观看: ${totalWatchedTime.toFixed(1)}s, PREVIEW_SECONDS: ${PREVIEW_SECONDS}`);
          }
          
          // 检查是否达到限制条件（任一条件满足都会触发）
          if(currentTime >= PREVIEW_SECONDS || totalWatchedTime >= PREVIEW_SECONDS){
            console.log('触发试看限制 - 播放时间:', currentTime.toFixed(1), 's, 观看时间:', totalWatchedTime.toFixed(1), 's');
            showPayOverlay();
          }
        }
      });

      // 试看计时器 - 区分iframe和Video.js两种播放器
      let forceCheckTimer = null;
      let previewTimer = null;
      let previewStarted = false;
      
      function startPreviewCountdown(){
        if(forceCheckTimer){ clearInterval(forceCheckTimer); forceCheckTimer = null; }
        if(previewTimer){ clearTimeout(previewTimer); previewTimer = null; }
        
        if(needRestrict() && !previewStarted){
          console.log('✅ 满足启动预览限制的条件');
          previewStarted = true;
          
          if(previewIsIframe) {
            // 对于iframe播放器，使用基于实际时间的计时器（因为无法监听跨域iframe内部事件）
            console.log(`🎬 iframe播放器启动${PREVIEW_SECONDS}秒预览限制，基于实际时间`);
            console.log(`⏰ 将在${PREVIEW_SECONDS}秒后显示支付遮罩`);
            previewTimer = setTimeout(() => {
              console.log('🔴 iframe预览時間到達限制（實際時間），顯示支付遮罩');
              console.log('🎯 即將調用showPayOverlay()函數');
              showPayOverlay();
            }, PREVIEW_SECONDS * 1000);
            console.log('✅ iframe计时器已设置成功！');
            console.log('📊 计时器详情:', {
              timerID: previewTimer,
              delaySeconds: PREVIEW_SECONDS,
              delayMs: PREVIEW_SECONDS * 1000,
              startTime: new Date().toLocaleTimeString()
            });
          } else {
            // 对于Video.js播放器，使用基于视频播放时间的检查机制
            console.log(`🎬 Video.js播放器启动${PREVIEW_SECONDS}秒预览限制，基于视频播放时间`);
            forceCheckTimer = setInterval(() => {
              if(vjsPlayer && (vjsPlayer.currentTime() >= PREVIEW_SECONDS || totalWatchedTime >= PREVIEW_SECONDS)) {
                console.log('🔴 Video.js预览时间到达限制 - 播放时间:', vjsPlayer.currentTime().toFixed(1), 's, 观看时间:', totalWatchedTime.toFixed(1), 's');
                clearInterval(forceCheckTimer);
                showPayOverlay();
              }
            }, 500); // 每500ms检查一次，提高精度
            console.log('✅ Video.js检查计时器已设置，Timer ID:', forceCheckTimer);
          }
        } else {
          console.log('❌ 不满足启动预览限制的条件:', {
            needRestrict: needRestrict(),
            previewStarted: previewStarted,
            IS_VIP_VIDEO: IS_VIP_VIDEO,
            IS_PREMIUM_USER: IS_PREMIUM_USER,
            FORCE_VIP_TEST: typeof FORCE_VIP_TEST !== 'undefined' ? FORCE_VIP_TEST : 'undefined'
          });
        }
      }

      // 当 HTML5 视频真正开始播放后再启动计时，避免用户未点击播放计时先结束
      vjsPlayer.on('play', ()=>{
        console.log('视频开始播放，previewIsIframe:', previewIsIframe);
        if(!previewIsIframe){
          console.log('启动预览限制计时');
          startPreviewCountdown();
        }
      });

      // 额外监听loadeddata事件，确保视频加载后也启动计时
      vjsPlayer.on('loadeddata', ()=>{
        console.log('视频数据加载完成，检查是否需要启动限制');
        if(needRestrict() && !previewStarted && !previewIsIframe){
          console.log('通过loadeddata事件启动预览限制计时');
          startPreviewCountdown();
        }
      });

      // 监听playing事件作为备用触发
      vjsPlayer.on('playing', ()=>{
        console.log('视频正在播放，检查计时器状态');
        if(needRestrict() && !previewStarted && !previewIsIframe){
          console.log('通过playing事件启动预览限制计时');
          startPreviewCountdown();
        }
      });

      // 防止用户调整播放速度绕过限制
      vjsPlayer.on('ratechange', ()=>{
        if(needRestrict() && vjsPlayer.playbackRate() !== 1) {
          console.log('检测到播放速度变化，重置为正常速度');
          vjsPlayer.playbackRate(1);
        }
      });

      // 防止用户通过拖拽进度条跳过内容
      vjsPlayer.on('seeking', ()=>{
        const seekTime = vjsPlayer.currentTime();
        if(needRestrict() && seekTime > PREVIEW_SECONDS) {
          console.log('检测到用户尝试跳过预览限制，显示支付遮罩');
          showPayOverlay();
        }
      });

      async function getPreviewUrl(){
        const res = await fetch(`/api/video/${VIDEO_ID}/preview`);
        const j   = await res.json();
        return j.data.url;
      }

      async function getPlayUrl(){
        const res = await fetch(`/api/video/${VIDEO_ID}/play`,{
          headers:{ 'Authorization':'Bearer '+ (localStorage.authToken||'') }
        });
        if(res.status===403){
          return null; // 未购买
        }
        const j = await res.json();
        return j.data && j.data.url;
      }

      function loadSource(url){
        if(url.includes('iframe.mediadelivery.net/embed')){
          const container = document.getElementById('playerContainer');
          // 创建并插入 iframe，而不替换整个容器，以保留遮罩层
          const iframe = document.createElement('iframe');
          iframe.src = url;
          // 确保跨域 iframe 发送站点来源，配合 Bunny 的 Allowed domains/Block empty referer
          iframe.setAttribute('referrerpolicy','origin-when-cross-origin');
          iframe.allow = 'accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture';
          iframe.allowFullscreen = true;
          iframe.style.position = 'absolute';
          iframe.style.top = '0';
          iframe.style.left = '0';
          iframe.style.width = '100%';
          iframe.style.height = '100%';
          iframe.style.border = 'none';

          // 隐藏原生 video 元素，避免同时播放
          playerEl.style.display = 'none';

          // 先插入 iframe，再把 overlay 置于最上层
          container.appendChild(iframe);
          overlay.style.zIndex = '9999';
          container.appendChild(overlay);

          // 记录状态
          previewIsIframe = true;
          previewIframe   = iframe;

          // 等待iframe加载完成后再启动计时器
          console.log('使用iframe播放，等待加载完成后启动预览计时');
          console.log('当前needRestrict()状态:', needRestrict());
          console.log('当前previewStarted状态:', previewStarted);
          
          // 由于跨域iframe的onload事件可能不可靠，直接使用延迟启动
          console.log('🎬 跨域iframe播放器，使用延迟启动策略');
          setTimeout(() => {
            console.log('🕒 3秒延迟到达，检查启动条件:', {
              previewStarted: previewStarted,
              needRestrict: needRestrict(),
              IS_VIP_VIDEO: IS_VIP_VIDEO,
              IS_PREMIUM_USER: IS_PREMIUM_USER
            });
            if(!previewStarted && needRestrict()) {
              console.log('⏰ 延迟3秒后启动iframe预览计时');
              startPreviewCountdown();
            } else {
              console.log('❌ 不满足启动条件，跳过计时器设置');
            }
          }, 3000); // 3秒后启动，给iframe足够的加载和播放时间
          
          return;
        }

        const isHls = url.includes('.m3u8');
        const isDash = url.endsWith('.mpd');
        if(isDash){
          vjsPlayer.src({ src:url, type:'application/dash+xml' });
        }else if(isHls){
          vjsPlayer.src({ src:url, type:'application/x-mpegURL' });
        }else{
          vjsPlayer.src({ src:url, type:'video/mp4' });
        }
      }

      async function unlockVideo(){
        const res = await fetch(`/api/unlock/${VIDEO_ID}`,{
          method:'POST',
          headers:{
            'Authorization':'Bearer '+(localStorage.authToken||''),
            'Content-Type':'application/json'
          },
          body: JSON.stringify({ hoursValid: 72 })
        });
        const j = await res.json();
        return j.iframe; // 字段名为 iframe
      }

      async function init(){
        let url;

        // 统一走受控接口，避免直接使用 DEFAULT_PLAY_URL 绕过 UA/鉴权
        if(IS_VIP_VIDEO || FORCE_VIP_TEST){
          if(IS_PREMIUM_USER){
            url = await getPlayUrl();
          } else {
            url = await getPreviewUrl();
          }
        } else if(IS_PAID_VIDEO){
          url = await getPlayUrl();
          if(!url){
            url = await getPreviewUrl();
          }
        } else {
          // 免费视频：仍走受控 preview（保持 UA 校验），预留后端返回完整地址
          url = await getPreviewUrl();
          if(!url){ url = DEFAULT_PLAY_URL; }
        }

        // 仍优先使用 Bunny iframe（嵌入播放器会自动对分片签名）；我们已设置 referrerpolicy 以满足 Allowed domains/Block empty referrer

        if(!url){
          console.error('无法获取播放地址');
          return;
        }

        loadSource(url);
        // 元数据加载后自动播放静音
        vjsPlayer.ready(()=>{
          console.log('Video.js播放器准备就绪');
          if(!needRestrict()){
            console.log('无需限制，正常播放');
            vjsPlayer.muted(true);
            vjsPlayer.play().catch(()=>{});
          } else {
            // 对于需要限制的视频，也允许播放但会在150秒后暂停
            console.log('需要限制的视频，启动播放和计时');
            vjsPlayer.muted(true);
            vjsPlayer.play().then(() => {
              console.log('视频播放成功，强制启动计时器');
              if(!previewStarted) {
                startPreviewCountdown();
              }
            }).catch((e) => {
              console.log('视频播放失败，但仍启动计时器:', e);
              if(!previewStarted) {
                startPreviewCountdown();
              }
            });
          }
        });
      }

      buyBtn.addEventListener('click', async ()=>{
        // 若为会员视频，则跳转个人中心页面（可使用VIP购买弹窗）
        if(IS_VIP_VIDEO || FORCE_VIP_TEST){
          console.log('🎯 会员视频：跳转到个人中心页面');
          location.href = '/user';
          return;
        }
        // 付费视频购买流程
        if(!IS_LOGIN){ alert('请先登录'); return; }
        try{
          const iframeUrl = await unlockVideo();
          if(iframeUrl){
            hasPurchase = true;
            if(previewTimer){ clearTimeout(previewTimer); previewTimer = null; }
            if(forceCheckTimer){ clearInterval(forceCheckTimer); forceCheckTimer = null; }
            if(previewIsIframe && previewIframe){ previewIframe.remove(); previewIframe = null; }
            overlay.style.display = 'none';

            const finalUrl = iframeUrl.includes('?') ? `${iframeUrl}&autoplay=true&muted=false&playsinline=true` : `${iframeUrl}?autoplay=true&muted=false&playsinline=true`;

            const container = document.getElementById('playerContainer');
            container.innerHTML = '';
            playerEl.style.display = 'none';
            previewIsIframe = false;
            loadSource(finalUrl);
          }else{
            alert('解锁失败');
          }
        }catch(e){ console.error(e); alert('购买失败'); }
      });

      init();

      // 引入视频预览处理脚本 - 直接复制主页的逻辑
      document.addEventListener('DOMContentLoaded', () => {
        // 首先为相关推荐视频卡片设置__data__属性
        const relatedVideosData = JSON.parse(document.getElementById('related-videos-data').textContent || '[]');
        const videoCards = document.querySelectorAll('.video-card');
        videoCards.forEach((card, index) => {
          if (relatedVideosData[index]) {
            card.__data__ = relatedVideosData[index];
          }
        });

        function applyPreviewAnimation(){
          document.querySelectorAll('.video-card').forEach(card => {
            const videoData = card.__data__ || {};
            const img = card.querySelector('.video-thumbnail img');
            if(!img) return;

            const thumbDiv = card.querySelector('.video-thumbnail');
            let p = thumbDiv?.dataset.preview || (videoData && videoData.previewUrl) || '';
            const imgFallback = thumbDiv?.dataset.image || (videoData && videoData.previewImage) || '';
            if(!p) return;

            if(/\.(mp4|webm)$/i.test(p)){
              const v = document.createElement('video');
              v.muted = true;
              v.loop = true;
              v.autoplay = true;
              v.playsInline = true;
              v.setAttribute('playsinline','');
              v.setAttribute('webkit-playsinline','');
              v.setAttribute('muted','');
              v.style.width = '100%';
              v.style.height = '100%';
              v.style.objectFit = 'cover';
              v.style.background = 'transparent';

              // 尝试 webm 与 mp4 双源
              const source1 = document.createElement('source');
              source1.src = p;
              source1.type = p.endsWith('.webm') ? 'video/webm' : 'video/mp4';
              const alt = p.endsWith('.webm') ? p.replace('.webm','.mp4') : p.replace('.mp4','.webm');
              const source2 = document.createElement('source');
              source2.src = alt;
              source2.type = alt.endsWith('.webm') ? 'video/webm' : 'video/mp4';
              v.appendChild(source1);
              v.appendChild(source2);
              v.src = p; // 设置首选源，Safari 需要

              // 出错时回退到图片
              v.onerror = ()=>{ if(imgFallback){ img.src = imgFallback; }
              };

              img.replaceWith(v);
            }else{
              img.src = p;
            }
          });
        }

        applyPreviewAnimation();
      });
    </script>
</body>
</html>