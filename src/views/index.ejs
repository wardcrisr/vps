<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>X福利姬 - 视频分享平台</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <script src="https://cdn.bunny.net/player-js/latest/player.min.js"></script>
  <style>
    body {
      background: #f4f5f7;
      min-height: 100vh;
      font-family: 'Microsoft YaHei', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    .navbar {
      background: #ffffff !important;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
      border-bottom: 1px solid #e3e5e7;
      padding: 12px 0;
    }
    
    .navbar-brand {
      font-size: 1.5rem;
      font-weight: bold;
      color: #00aeec !important;
    }
    
    .search-box {
      width: 480px;
    }
    
    .search-input {
      border-radius: 8px;
      padding: 8px 15px;
      border: 1px solid #e3e5e7;
      font-size: 0.9rem;
      background: #f9f9f9;
    }
    
    .search-input:focus {
      background: #ffffff;
      border-color: #00aeec;
      box-shadow: 0 0 0 0.2rem rgba(0, 174, 236, 0.25);
    }
    
    .search-btn {
      background: #00aeec;
      color: white;
      border: none;
      border-radius: 6px;
      padding: 8px 16px;
      margin-left: 8px;
    }
    
    .main-container {
      padding-top: 80px;
      max-width: 1400px;
      margin: 0 auto;
    }
    
    .category-nav {
      background: white;
      border-radius: 8px;
      padding: 16px;
      margin-bottom: 24px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
    }
    
    .category-nav .nav-link {
      color: #61666d;
      font-size: 0.9rem;
      padding: 8px 16px;
      border-radius: 6px;
      margin-right: 8px;
      border: none;
    }
    
    .category-nav .nav-link.active {
      background: #00aeec;
      color: white;
    }
    
    .video-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(360px, 1fr));
      gap: 20px;
      padding: 0 16px;
      margin-bottom: 40px;
    }
    
    /* B站风格网格布局优化 */
    @media (min-width: 1200px) {
      .video-grid {
        grid-template-columns: repeat(auto-fill, minmax(360px, 1fr));
        gap: 24px;
      }
    }
    
    @media (max-width: 768px) {
      .video-grid {
        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
        gap: 16px;
        padding: 0 12px;
      }
    }
    
    @media (max-width: 480px) {
      .video-grid {
        grid-template-columns: 1fr;
        gap: 12px;
        padding: 0 8px;
      }
    }
    
    .video-card {
      background: transparent;
      border: none;
      overflow: hidden;
      box-shadow: none;
      transition: transform 0.2s ease;
      cursor: pointer;
    }
    
    .video-card:hover {
      transform: translateY(-3px);
    }
    
    .video-thumbnail {
      position: relative;
      width: 100%;
      aspect-ratio: 16 / 9;
      background: #f0f0f0;
      overflow: hidden;
      border-radius: 12px;
    }
    
    .video-thumbnail img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .video-thumbnail video {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .video-duration {
      position: absolute;
      bottom: 8px;
      right: 8px;
      background: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 2px 6px;
      border-radius: 4px;
      font-size: 0.75rem;
    }
    
    .video-info {
      padding: 12px;
    }
    
    .video-title {
      font-size: 1rem;
      font-weight: 700;
      color: #0f0f0f;
      line-height: 1.4;
      margin-bottom: 6px;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
      height: auto;
    }
    
    .video-stats {
      display: flex;
      align-items: center;
      gap: 6px;
      color: #606060;
      font-size: 0.85rem;
    }
    
    .video-stats i {
      margin-right: 4px;
    }
    
    .loading-skeleton {
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: loading 1.5s infinite;
      border-radius: 4px;
    }
    
    @keyframes loading {
      0% { background-position: 200% 0; }
      100% { background-position: -200% 0; }
    }
    
    .empty-state {
      text-align: center;
      padding: 60px 20px;
      color: #9499a0;
    }
    
    .empty-state i {
      font-size: 3rem;
      margin-bottom: 16px;
      color: #d1d5db;
    }
    
    /* 视频播放器模态框 */
    .video-modal .modal-dialog {
      max-width: 1000px;
    }
    
    .video-modal .modal-body {
      padding: 0;
    }
    
    .video-modal video {
      width: 100%;
      height: auto;
      border-radius: 8px;
    }
    
    /* 响应式设计 */
    @media (max-width: 768px) {
      .search-box {
        width: 100%;
        margin-bottom: 12px;
      }
      
      .video-grid {
        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
        gap: 16px;
        padding: 0 12px;
      }
    }
    
    @media (max-width: 576px) {
      .video-grid {
        grid-template-columns: 1fr;
        padding: 0 8px;
      }
    }
  </style>
</head>
<body>
  <!-- 顶部导航栏 -->
  <nav class="navbar navbar-expand-lg fixed-top">
    <div class="container-fluid px-4">
      <a class="navbar-brand" href="/">
        <i class="fas fa-play-circle me-2"></i>X福利姬
      </a>
      
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      
      <div class="collapse navbar-collapse" id="navbarNav">
        <div class="mx-auto">
          <div class="search-box">
            <div class="d-flex">
              <input type="text" class="form-control search-input" placeholder="" id="searchInput">
              <button class="search-btn" id="searchBtn">
                <i class="fas fa-search"></i>
              </button>
            </div>
          </div>
        </div>
        
        <ul class="navbar-nav">
          <% if (typeof user === 'undefined' || !user) { %>
            <li class="nav-item"><a class="nav-link" href="/api/auth/login">登录</a></li>
            <li class="nav-item"><a class="nav-link" href="/api/auth/register">注册</a></li>
          <% } else { %>
            <% if (user.role === 'admin') { %>
              <li class="nav-item">
                <a class="nav-link text-primary" href="/api/admin/dashboard">
                  <i class="fas fa-cog"></i> 管理后台
                </a>
              </li>
            <% } %>
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown">
                <i class="fas fa-user-circle"></i> <%= user.username %>
              </a>
              <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="/user">个人中心</a></li>
                <li><a class="dropdown-item" href="/settings">设置</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="/api/auth/logout">退出登录</a></li>
              </ul>
            </li>
          <% } %>
        </ul>
      </div>
    </div>
  </nav>

  <!-- 主要内容区域 -->
  <div class="main-container">
    <!-- 分类导航 -->
    <div class="category-nav">
      <ul class="nav nav-pills">
        <li class="nav-item">
          <a class="nav-link <%= (typeof activeTag !== 'undefined' && activeTag === 'free') ? 'active' : '' %>" href="/free">免费视频</a>
        </li>
        <li class="nav-item">
          <a class="nav-link <%= (typeof activeTag !== 'undefined' && activeTag === 'paid') ? 'active' : '' %>" href="/paid">付费视频</a>
        </li>
        <li class="nav-item">
          <a class="nav-link <%= (typeof activeTag !== 'undefined' && activeTag === 'vip') ? 'active' : '' %>" href="/vip">会员视频</a>
        </li>
      </ul>
    </div>

    <!-- 视频网格 -->
    <div id="videoContainer">
      <div class="video-grid" id="videoGrid">
        <!-- B站风格视频卡片 -->
        <% if (videos && videos.length > 0) { %>
          <% videos.forEach(function(video) { %>
            <%- include('partials/videoCard', { video: video }) %>
          <% }); %>
        <% } else { %>
          <!-- 空状态 -->
          <div class="empty-state" style="grid-column: 1 / -1;">
            <i class="fas fa-video-slash"></i>
            <h5>暂无视频</h5>
            <p>目前还没有上传任何视频</p>
          </div>
        <% } %>
      </div>
    </div>

    <!-- 空状态 -->
    <div class="empty-state" id="emptyState" style="display: none;">
      <i class="fas fa-video-slash"></i>
      <h5>暂无视频</h5>
      <p>目前还没有上传任何视频</p>
    </div>

    <!-- 加载更多 -->
    <div class="text-center mt-4" id="loadMoreContainer" style="display: none;">
      <button class="btn btn-outline-primary" id="loadMoreBtn">
        <i class="fas fa-arrow-down me-2"></i>加载更多
      </button>
    </div>
  </div>

  <!-- 视频播放模态框 -->
  <div class="modal fade video-modal" id="videoModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="videoModalTitle">视频播放</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <!-- ★ Bunny Player 视频嵌入 ★ -->
          <div id="modalVideoContainer" style="position: relative; padding-top: 56.25%;"></div>
          <!-- ★ 视频嵌入结束 ★ -->
          <div class="mt-3">
            <h6 id="modalVideoTitle"></h6>
            <div class="d-flex align-items-center gap-3 text-muted">
              <span><i class="fas fa-eye me-1"></i><span id="modalVideoViews">0</span> 次观看</span>
              <span><i class="fas fa-clock me-1"></i><span id="modalVideoDate">刚刚</span></span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- HLS.js 用于播放 .m3u8 视频流 -->
  <script src="https://cdn.jsdelivr.net/npm/hls.js@1.5.0/dist/hls.min.js"></script>
  <script>
    let currentCategory = 'all';
    let currentPage = 1;
    let isLoading = false;
    let hasMore = true;
    let allVideos = [];

    // 全局 Hls 实例（模态框关闭或切换视频时需要销毁）
    let hlsInstance = null;

    // 播放视频（Bunny Player 版本）
    let modalPlayer = null;
    async function playVideo(video) {
      const modalEl = document.getElementById('videoModal');
      const modal = new bootstrap.Modal(modalEl);
      const containerId = '#modalVideoContainer';

      const modalTitle = document.getElementById('videoModalTitle');
      const modalVideoTitle = document.getElementById('modalVideoTitle');
      const modalVideoViews = document.getElementById('modalVideoViews');
      const modalVideoDate = document.getElementById('modalVideoDate');

      // 清理旧播放器
      if (modalPlayer && typeof modalPlayer.destroy === 'function') {
        modalPlayer.destroy();
        modalPlayer = null;
      }

      document.querySelector(containerId).innerHTML = '';

      let embedUrl = '';
      try {
        const bunnyId = video.bunnyId || video.videoId || video.id;
        const res = await fetch(`/api/bunny-embed/${bunnyId}`);
        const data = await res.json();
        if (data.success && data.embedUrl) {
          embedUrl = data.embedUrl;
        } else if (video.embedUrl) {
          embedUrl = video.embedUrl;
        }
      } catch (err) {
        console.error('获取 Bunny Embed URL 失败:', err);
        embedUrl = video.embedUrl || '';
      }

      if (!embedUrl) {
        alert('无法播放该视频');
        return;
      }

      modalPlayer = new BunnyPlayer.Player(containerId, {
        url: embedUrl,
        previewTime: 30,
        allowFullscreen: true,
        playsinline: true,
        disableIosPlayer: true,
        controls: { download: false },
        useNativeHlsOnSafari: false
      }).on('ready', function(p){
        const v = p.getContainer().querySelector('video');
        if(v){
          v.setAttribute('controlsList','nodownload nofullscreen noremoteplayback');
          v.setAttribute('oncontextmenu','return false');
        }
      });

      // 模态框关闭时销毁播放器，释放资源
      modalEl.addEventListener('hidden.bs.modal', () => {
        if (modalPlayer && typeof modalPlayer.destroy === 'function') {
          modalPlayer.destroy();
          modalPlayer = null;
        }
      }, { once: true });

      modalTitle.textContent = video.name || video.title;
      modalVideoTitle.textContent = video.name || video.title;
      modalVideoViews.textContent = formatNumber(video.views || 0);
      modalVideoDate.textContent = formatDate(video.uploadDate || video.createdAt || new Date());

      modal.show();

      // 观看次数
      incrementViews(video.filename || video.id);
    }

    // 增加观看次数
    async function incrementViews(filename) {
      try {
        await fetch(`/api/videos/${filename}/view`, { method: 'POST' });
      } catch (error) {
        console.error('增加观看次数失败:', error);
      }
    }

    // 页面加载完成后初始化
    document.addEventListener('DOMContentLoaded', function() {
      // 根据后端变量决定是否自动加载视频
      <% if (!disableDynamicLoad) { %>
        loadVideos();
      <% } %>
      initializeEventListeners();
    });

    // 初始化事件监听器
    function initializeEventListeners() {
      // 搜索功能
      document.getElementById('searchInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          performSearch();
        }
      });

      document.getElementById('searchBtn').addEventListener('click', performSearch);

      // 分类切换
      document.querySelectorAll('[data-category]').forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          switchCategory(this.dataset.category, this);
        });
      });

      // 加载更多
      const loadMoreBtn = document.getElementById('loadMoreBtn');
      if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', loadMoreVideos);
      }
    }

    // 加载视频列表
    async function loadVideos(reset = true) {
      if (isLoading) return;
      
      isLoading = true;
      if (reset) {
        currentPage = 1;
        hasMore = true;
        showLoadingSkeleton();
      }

      try {
        const response = await fetch(`/vod/videos?page=${currentPage}&category=${currentCategory}`);
        const data = await response.json();

        if (data.success) {
          let videos = data.videos || [];
          // ========= 前端去重：按 _id 唯一 ==========
          const uniqMap = new Map();
          videos.forEach(v => {
            const key = v._id || v.id || v.filename;
            if (!uniqMap.has(key)) {
              uniqMap.set(key, v);
            }
          });
          videos = Array.from(uniqMap.values());
          
          if (reset) {
            allVideos = videos;
          } else {
            allVideos = [...allVideos, ...videos];
          }

          renderVideos(allVideos, reset);
          
          hasMore = videos.length >= 20; // 假设每页20个
          toggleLoadMore();
          
          if (videos.length === 0 && reset) {
            showEmptyState();
          }
        } else {
          console.error('加载视频失败:', data.message);
          if (reset) showEmptyState();
        }
      } catch (error) {
        console.error('加载视频失败:', error);
        if (reset) showEmptyState();
      } finally {
        isLoading = false;
      }
    }

    // 渲染视频列表
    function renderVideos(videos, reset = true) {
      const grid = document.getElementById('videoGrid');
      const emptyState = document.getElementById('emptyState');
      
      emptyState.style.display = 'none';
      
      if (reset) {
        grid.innerHTML = '';
      }

      videos.forEach(video => {
        if (reset || !document.querySelector(`[data-video-id="${video.filename}"]`)) {
          const videoCard = createVideoCard(video);
          grid.appendChild(videoCard);
        }
      });
    }

    // 创建视频卡片
    function createVideoCard(video) {
      const card = document.createElement('div');
      card.className = 'video-card';
      card.setAttribute('data-video-id', video.filename || video._id);
      
      // 使用 previewUrl 作为主要封面源
      const thumbnailSrc = video.previewUrl || '/api/placeholder/video-thumbnail';
      let fixedThumbnail = thumbnailSrc;
      
      const duration = formatDuration(video.duration || 0);
      const views = formatNumber(video.views || 0);
      const uploadDate = formatDate(video.createdAt || video.uploadDate || new Date());
      
      // 获取上传者信息
      const uploader = video.uploader || video.uploaderInfo || video.up || {};
      const uploaderUid = uploader.uid || uploader._id || 'anonymous';
      const uploaderName = uploader.name || uploader.displayName || uploader.username || '匿名用户';

      card.innerHTML = `
      
        <div class="video-thumbnail" onclick="location.href='/video/${video._id || video.id}'">
          <img src="${fixedThumbnail}" alt="${video.title || video.name}" onerror="this.src='/api/placeholder/video-thumbnail'">
          <div class="video-duration">${duration}</div>
          ${video.isPremiumOnly ? '<div class="premium-badge">付费</div>' : ''}
        </div>
        <div class="video-info">
          <div class="video-title" title="${video.title || video.name}" onclick="location.href='/video/${video._id || video.id}'" style="cursor: pointer;">
            ${video.title || video.name}
          </div>
          <div class="uploader-info" onclick="event.stopPropagation(); location.href='/space/${uploaderUid}'" style="cursor: pointer; margin-bottom: 8px;">
            <div style="display: flex; align-items: center; gap: 6px;">
              <span style="color: #666; font-size: 0.8rem; font-weight: 500;">👤 ${uploaderName}</span>
            </div>
          </div>
          <div class="video-stats">
            <span><i class="fas fa-eye"></i>${views}</span>
            <span><i class="fas fa-clock"></i>${uploadDate}</span>
          </div>
        </div>
      `;
      card.__data__ = video; // 供全局脚本读取
      return card;
    }

    // 搜索功能
    function performSearch() {
      const query = document.getElementById('searchInput').value.trim();
      if (query) {
        // 实现搜索逻辑
        currentCategory = 'search';
        loadVideos(true);
      }
    }

    // 切换分类
    function switchCategory(category, element) {
      document.querySelectorAll('[data-category]').forEach(link => link.classList.remove('active'));
      element.classList.add('active');
      
      currentCategory = category;
      loadVideos(true);
    }

    // 加载更多视频
    function loadMoreVideos() {
      if (hasMore && !isLoading) {
        currentPage++;
        loadVideos(false);
      }
    }

    // 显示加载骨架屏
    function showLoadingSkeleton() {
      const grid = document.getElementById('videoGrid');
      grid.innerHTML = '';
      
      for (let i = 0; i < 8; i++) {
        const skeleton = document.createElement('div');
        skeleton.className = 'video-card';
        skeleton.innerHTML = `
          <div class="video-thumbnail loading-skeleton"></div>
          <div class="video-info">
            <div class="loading-skeleton mb-2" style="height: 40px;"></div>
            <div class="loading-skeleton" style="height: 20px; width: 60%;"></div>
          </div>
        `;
        grid.appendChild(skeleton);
      }
    }

    // 显示空状态
    function showEmptyState() {
      const grid = document.getElementById('videoGrid');
      const emptyState = document.getElementById('emptyState');
      
      grid.innerHTML = '';
      emptyState.style.display = 'block';
    }

    // 切换加载更多按钮
    function toggleLoadMore() {
      const container = document.getElementById('loadMoreContainer');
      container.style.display = hasMore ? 'block' : 'none';
    }

    // 工具函数
    function formatDuration(seconds) {
      if (!seconds) return '00:30';
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = seconds % 60;
      return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    }

    function formatNumber(num) {
      if (num >= 10000) {
        return (num / 10000).toFixed(1) + '万';
      }
      return num.toString();
    }

    function formatDate(date) {
      const now = new Date();
      const diff = now - new Date(date);
      const days = Math.floor(diff / (24 * 60 * 60 * 1000));
      
      if (days === 0) return '今天';
      if (days === 1) return '昨天';
      if (days < 7) return `${days}天前`;
      if (days < 30) return `${Math.floor(days / 7)}周前`;
      return `${Math.floor(days / 30)}月前`;
    }

// 引入视频预览处理脚本
document.addEventListener('DOMContentLoaded', ()=>{
  // 针对所有 .video-card 执行预览替换
  document.querySelectorAll('.video-card, .videocard').forEach(card=>{
    const videoData = card.__data__;       // 在 createVideoCard 里写入 card.__data__ = video;
    if(!videoData || !videoData.previewUrl) return;

    const img = card.querySelector('.video-thumbnail img, .coverwrapper img');
    if(!img) return;

    const p = videoData.previewUrl;
    if(/\.(mp4|webm)$/i.test(p)){
      const v=document.createElement('video');
      v.src=p;v.muted=true;v.loop=true;v.autoplay=true;v.playsInline=true;
      v.style.width='100%';v.style.height='100%';v.style.objectFit='cover';
      img.replaceWith(v);
    }else{
      img.src = p;
    }
  });
});
 
  </script>
</body>
</html>

